// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// HasUserScopeService is an autogenerated mock type for the HasUserScopeService type
type HasUserScopeService struct {
	mock.Mock
}

type HasUserScopeService_Expecter struct {
	mock *mock.Mock
}

func (_m *HasUserScopeService) EXPECT() *HasUserScopeService_Expecter {
	return &HasUserScopeService_Expecter{mock: &_m.Mock}
}

// HasUserScope provides a mock function with given fields: ctx, userID, scope
func (_m *HasUserScopeService) HasUserScope(ctx context.Context, userID uuid.UUID, scope string) (bool, error) {
	ret := _m.Called(ctx, userID, scope)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (bool, error)); ok {
		return rf(ctx, userID, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, userID, scope)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserScopeService_HasUserScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUserScope'
type HasUserScopeService_HasUserScope_Call struct {
	*mock.Call
}

// HasUserScope is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - scope string
func (_e *HasUserScopeService_Expecter) HasUserScope(ctx interface{}, userID interface{}, scope interface{}) *HasUserScopeService_HasUserScope_Call {
	return &HasUserScopeService_HasUserScope_Call{Call: _e.mock.On("HasUserScope", ctx, userID, scope)}
}

func (_c *HasUserScopeService_HasUserScope_Call) Run(run func(ctx context.Context, userID uuid.UUID, scope string)) *HasUserScopeService_HasUserScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *HasUserScopeService_HasUserScope_Call) Return(_a0 bool, _a1 error) *HasUserScopeService_HasUserScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HasUserScopeService_HasUserScope_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (bool, error)) *HasUserScopeService_HasUserScope_Call {
	_c.Call.Return(run)
	return _c
}

// NewHasUserScopeService creates a new instance of HasUserScopeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasUserScopeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HasUserScopeService {
	mock := &HasUserScopeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
